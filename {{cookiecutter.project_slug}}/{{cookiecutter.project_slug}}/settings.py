"""
Django settings for {{cookiecutter.project_slug}} project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from configurations import Configuration, values

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


class Common(Configuration):

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.SecretValue()

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False

    # Simple configuration which writes all logging from the django logger to a local file and prints Django's
    # logging to the console

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {filename} {funcName} {lineno} {module} {process:d} '
                          '{thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            # 'file': {
            #     'level': 'INFO',
            #     'class': 'logging.FileHandler',
            #     'filename': 'logs/mowitilog.log',
            #     'formatter': 'verbose',
            # },
            'console': {
                'level': 'DEBUG',
                # 'filters': ['require_debug_true'],
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
            'systemd': {
                'level': 'DEBUG',
                'class': 'systemd.journal.JournalHandler',
                'formatter': 'verbose'
            }
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'systemd'],
                'level': 'INFO',
                'propagate': True,
            },
        },
    }

    ALLOWED_HOSTS = []


    # Application definition

    BUILTIN_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    {% if cookiecutter.GIS_project == "y" %}
    GIS_APPS = [
        'django.contrib.gis',
        'leaflet',
        'chartjs',
        'colorful',
    ]
    {% else %}
    GIS_APPS = []
    {% endif %}

    LOCAL_APPS = [
        '{{cookiecutter.project_slug}}.apps.{{cookiecutter.app_name}}.apps.{{cookiecutter.app_name}}Config',
    ]

    THIRD_PARTY_APPS = [

    ]

    INSTALLED_APPS = BUILTIN_APPS + GIS_APPS + LOCAL_APPS + THIRD_PARTY_APPS

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = '{{cookiecutter.project_slug}}.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = '{{cookiecutter.project_slug}}.wsgi.application'

    {% if cookiecutter.GIS_project == "y" %}
    GDAL_LIBRARY_PATH = values.PathValue(environ_required=True)
    GEOS_LIBRARY_PATH = values.PathValue(environ_required=True)
    {% endif %}

    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases


    {% if cookiecutter.GIS_project == "y" %}
    DATABASES = {
            'default': {
                'ENGINE': 'django.contrib.gis.db.backends.postgis',
                'NAME': values.Value('vagrant', environ_name="DATABASES_NAME"),
                'USER': values.Value('vagrant', environ_name="DATABASES_USER"),
                'HOST': values.Value('', environ_name="DATABASES_HOST"),
                'PORT': '5432',
            }
        }
    {% else %}
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': values.Value('vagrant', environ_name="DATABASES_NAME"),
            'USER': values.Value('vagrant', environ_name="DATABASES_USER"),
            'HOST': values.Value('', environ_name="DATABASES_HOST"),
            'PORT': '5432',
        }
    }
    {% endif %}

    # Password validation
    # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/2.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.2/howto/static-files/

    STATIC_URL = '/static/'
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )
    STATIC_ROOT = os.path.join(BASE_DIR, "static_all")


    # typically, os.path.join(os.path.dirname(__file__), 'media')
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'


    {% if cookiecutter.GIS_project == "y" %}
    LEAFLET_CONFIG = {
            'DEFAULT_CENTER': (45.2, 29.2),
            'DEFAULT_ZOOM': 10,
            'MAX_ZOOM':20,
            'MIN_ZOOM':5,
            'ATTRIBUTION_PREFIX':'{{cookiecutter.project_slug.upper()}} {{cookiecutter.app_name.upper()}}',
            'RESET_VIEW': True
        }
    {% endif %}


class Dev(Common):
    DEBUG = True
    ALLOWED_HOSTS = [
        'localhost', '127.0.0.1', '0.0.0.0', '172.16.16.16'
    ]


class Prod(Common):
    pass
