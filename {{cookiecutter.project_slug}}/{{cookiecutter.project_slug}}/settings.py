"""
Django settings for {{cookiecutter.project_slug}} project.

Generated by "django-admin startproject" using Django 2.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from typing import List

from configurations import Configuration, values


class Common(Configuration):
    SECRET_KEY = values.SecretValue()
    DEBUG = False
    ALLOWED_HOSTS: List[str] = []

    ROOT_URLCONF = "{{cookiecutter.project_slug}}.urls"
    WSGI_APPLICATION = "{{cookiecutter.project_slug}}.wsgi.application"

    LANGUAGE_CODE = "en-us"
    TIME_ZONE = "UTC"
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.sites",
        "django.contrib.staticfiles",
        "allauth",
        "allauth.account",
        "allauth.socialaccount",
        "anymail",
        "{{cookiecutter.project_slug}}.apps.browser_app",
        "{{cookiecutter.project_slug}}.apps.users",
    ]
    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ]
    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]
    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
        {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
        {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
    ]
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.Argon2PasswordHasher",  # requires argon2-cffi
        "django.contrib.auth.hashers.PBKDF2PasswordHasher",
        "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
        "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    ]

    AUTHENTICATION_BACKENDS = [
        "django.contrib.auth.backends.ModelBackend",
        "allauth.account.auth_backends.AuthenticationBackend",
    ]
    AUTH_USER_MODEL = "users.User"
    LOGIN_REDIRECT_URL = "users:redirect"
    LOGIN_URL = "account_login"

    # DATABASES
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": values.Value("", environ_name="DATABASES_NAME"),
            "USER": values.Value("", environ_name="DATABASES_USER"),
            "HOST": values.Value("", environ_name="DATABASES_HOST"),
            "PORT": values.Value("5432", environ_name="DATABASES_PORT"),
        }
    }

    # CACHES
    CACHE_HOST = values.Value("127.0.0.1", environ_name="CACHE_HOST")
    CACHE_PORT = values.Value("6379", environ_name="CACHE_PORT")
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{CACHE_HOST}:{CACHE_PORT}/1",
            "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
            "KEY_PREFIX": "{{cookiecutter.project_slug}}",
        }
    }

    # EMAIL
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    DEFAULT_FROM_EMAIL = "lucian.ursu@gmail.com"
    SERVER_EMAIL = "lucian.ursu@gmail.com"

    # Static Files
    if values.BooleanValue(False, environ_name="ENABLE_STATIC_FILES"):
        STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


class Dev(Common):
    DEBUG = True
    STATIC_URL = "/static/"
    ALLOWED_HOSTS = [
        "0.0.0.0",
        "localhost"
    ]

    if values.BooleanValue(False, environ_name="ENABLE_STATIC_FILES"):
        INSTALLED_APPS = ["whitenoise.runserver_nostatic"] + Common.INSTALLED_APPS


class Prod(Common):
    ALLOWED_HOSTS: List[str] = [

    ]

    # DATABASES
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": values.Value("", environ_name="DATABASES_NAME"),
            "USER": values.Value("", environ_name="DATABASES_USER"),
            "PASSWORD": values.Value("", environ_name="DATABASES_PASSWORD"),
            "HOST": values.Value("", environ_name="DATABASES_HOST"),
            "PORT": values.Value("5432", environ_name="DATABASES_PORT"),
        }
    }

    ANYMAIL = {
        "MAILGUN_API_KEY": values.Value(
            "", environ_name="MAILGUN_API_KEY", environ_prefix=None
        ),
        "MAILGUN_SENDER_DOMAIN": "mg.example.com",  # your Mailgun domain, if needed
    }

    # User-uploaded files
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    # Static files
    if values.BooleanValue(False, environ_name="ENABLE_STATIC_FILES"):
        STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
        AWS_ACCESS_KEY_ID = values.Value(
            "", environ_name="DO_ACCESS_KEY_ID", environ_prefix=None
        )
        AWS_SECRET_ACCESS_KEY = values.Value(
            "", environ_name="DO_SECRET_ACCESS_KEY", environ_prefix=None
        )
        AWS_S3_REGION_NAME = values.Value(
            "", environ_name="DO_SPACES_REGION_NAME", environ_prefix=None
        )
        AWS_S3_ENDPOINT_URL = f"https://${AWS_S3_REGION_NAME}.digitaloceanspaces.com"
        STATIC_HOST = AWS_S3_ENDPOINT_URL
